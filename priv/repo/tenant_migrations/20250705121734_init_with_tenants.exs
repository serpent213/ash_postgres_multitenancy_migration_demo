defmodule Demo.Repo.TenantMigrations.InitWithTenants do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :family_name, :text
      add :given_names, :text
      add :inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')")

      add :identity_id,
          references(:identities, column: :id, name: "users_identity_id_fkey", type: :uuid, prefix: "public"),
          null: false
    end

    create table(:projects, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :comment, :text
      add :sync_status, :text
      add :inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id, references(:users, column: :id, name: "projects_user_id_fkey", type: :uuid, prefix: prefix()),
        null: false
    end

    create table(:photos, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :timestamp, :utc_datetime_usec, null: false
      add :timezone, :text
      add :comment, :text
      add :rotation_angle, :bigint
      add :mime_type, :text, null: false
      add :sha256_hash, :text
      add :sync_status, :text
      add :file_upload_status, :text
      add :deleted, :boolean
      add :inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')")

      add :project_id,
          references(:projects, column: :id, name: "photos_project_id_fkey", type: :uuid, prefix: prefix()),
          null: false
    end

    create table(:events, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :start_time, :utc_datetime_usec, null: false
      add :duration, :bigint, null: false
      add :timezone, :text
      add :comment, :text
      add :sync_status, :text
      add :deleted, :boolean
      add :inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')")

      add :project_id,
          references(:projects, column: :id, name: "events_project_id_fkey", type: :uuid, prefix: prefix()),
          null: false
    end
  end

  def down do
    drop constraint(:events, "events_project_id_fkey")

    drop table(:events, prefix: prefix())

    drop constraint(:photos, "photos_project_id_fkey")

    drop table(:photos, prefix: prefix())

    drop constraint(:projects, "projects_user_id_fkey")

    drop table(:projects, prefix: prefix())

    drop constraint(:users, "users_identity_id_fkey")

    drop table(:users, prefix: prefix())
  end
end
