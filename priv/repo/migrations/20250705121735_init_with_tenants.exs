defmodule Demo.Repo.Migrations.InitWithTenants do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:tokens, primary_key: false) do
      add :jti, :text, null: false, primary_key: true
      add :subject, :text, null: false
      add :expires_at, :utc_datetime, null: false
      add :purpose, :text, null: false
      add :extra_data, :map

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:organisations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :website_url, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:identity_organisations, primary_key: false) do
      add :identity_id, :uuid, null: false, primary_key: true
      add :organisation_id, :uuid, null: false, primary_key: true
    end

    create table(:identities, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:identity_organisations) do
      modify :identity_id,
             references(:identities,
               column: :id,
               name: "identity_organisations_identity_id_fkey",
               type: :uuid,
               prefix: "public"
             )

      modify :organisation_id,
             references(:organisations,
               column: :id,
               name: "identity_organisations_organisation_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:identities) do
      add :email, :citext, null: false
    end

    create unique_index(:identities, [:email], name: "identities_unique_email_index")

    create table(:api_keys, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :api_key_hash, :binary, null: false
      add :expires_at, :utc_datetime_usec, null: false
      add :user_id, :uuid

      add :organisation_id,
          references(:organisations,
            column: :id,
            name: "api_keys_organisation_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create unique_index(:api_keys, [:api_key_hash], name: "api_keys_unique_api_key_index")
  end

  def down do
    drop_if_exists unique_index(:api_keys, [:api_key_hash], name: "api_keys_unique_api_key_index")

    drop constraint(:api_keys, "api_keys_user_id_fkey")

    drop constraint(:api_keys, "api_keys_organisation_id_fkey")

    drop table(:api_keys)

    drop_if_exists unique_index(:identities, [:email], name: "identities_unique_email_index")

    alter table(:identities) do
      remove :email
    end

    drop constraint(:identity_organisations, "identity_organisations_identity_id_fkey")

    drop constraint(:identity_organisations, "identity_organisations_organisation_id_fkey")

    alter table(:identity_organisations) do
      modify :organisation_id, :uuid
      modify :identity_id, :uuid
    end

    drop table(:identities)

    drop table(:identity_organisations)

    drop table(:organisations)

    drop table(:tokens)
  end
end
